#version 450

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer SurfaceHashIrradianceCacheBuffer {
    uint surfaceHashIrradianceCacheBuffer[];
};

void writeHeat(uint id, uint heat)
{
    surfaceHashIrradianceCacheBuffer[id * 3] &= 0x00FFFFFF;
    surfaceHashIrradianceCacheBuffer[id * 3] |= (heat << 6);
}

void writeSampleCount(uint id, uint sampleCount)
{
    surfaceHashIrradianceCacheBuffer[id * 3] &= 0xFF000000;
    surfaceHashIrradianceCacheBuffer[id * 3] |= sampleCount & 0x00FFFFFF;
}

void writeSampleSum(uint id, uint sampleSum)
{
    surfaceHashIrradianceCacheBuffer[id * 3 + 1] = sampleSum;
}

void writeLastSampleCount(uint id, uint sampleCount)
{
    surfaceHashIrradianceCacheBuffer[id * 3 + 2] = sampleCount & 0x00FFFFFF;
}

uint maxSampleCount = 100;

void main()
{
    uint id
        = gl_GlobalInvocationID.x
        + gl_GlobalInvocationID.y * gl_NumWorkGroups.x
        + gl_GlobalInvocationID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y;
    uint sampleCount = surfaceHashIrradianceCacheBuffer[id * 3] & 0x00FFFFFF;
    uint sampleSum = surfaceHashIrradianceCacheBuffer[id * 3 + 1];
    uint lastSampleCount = surfaceHashIrradianceCacheBuffer[id * 3 + 2];

    uint newSampleCount = 0;
    if(sampleCount > maxSampleCount) {
        newSampleCount = maxSampleCount;
    } else if (lastSampleCount == sampleCount) {
        newSampleCount = 1;
    }

    if (newSampleCount != 0) {
        if (newSampleCount == 1) {
            writeSampleCount(id, 1);
            writeSampleSum(id, 0);
            writeLastSampleCount(id, 1);
            return;
        }
        sampleSum = uint(float(sampleSum) * float(newSampleCount) / float(sampleCount));
        sampleSum = min(newSampleCount * 255, sampleSum);
        sampleCount = newSampleCount;

        writeSampleCount(id, sampleCount);
        writeSampleSum(id, sampleSum);
        writeLastSampleCount(id, sampleCount);
    }
}
